"""Tests for preset and template combination functionality."""

import pytest
import tempfile
from pathlib import Path
import yaml

from lhp.core.orchestrator import ActionOrchestrator


class TestPresetTemplateCombination:
    """Test preset application to template-generated actions."""

    def test_preset_applies_to_template_generated_write_actions(self):
        """Test that presets are applied to write actions generated by templates.
        
        This test validates the fix for the execution order bug where presets
        were applied before template expansion, causing preset configurations
        to never reach template-generated actions.
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            
            # Create project structure
            self._create_project_directories(project_root)
            
            # Create preset with write_actions configuration
            self._create_test_preset(project_root)
            
            # Create template that generates write actions
            self._create_test_template(project_root)
            
            # Create flowgroup that uses both preset and template
            self._create_test_flowgroup(project_root)
            
            # Create substitutions
            self._create_substitutions(project_root)
            
            # Generate code using orchestrator
            orchestrator = ActionOrchestrator(project_root)
            generated_files = orchestrator.generate_pipeline("test_pipeline", "dev")
            
            # Get generated code
            generated_code = generated_files.get("preset_template_test.py", "")
            
            # Assert that preset table_properties are applied to template-generated actions
            # This should FAIL initially due to execution order bug
            assert "delta.enableRowTracking" in generated_code, \
                "Preset table property should be applied to template-generated write action"
            
            assert "delta.autoOptimize.optimizeWrite" in generated_code, \
                "Preset table property should be applied to template-generated write action"
            
            # Also verify template was expanded correctly
            assert "customer_data" in generated_code, \
                "Template should be expanded with parameters"
            
            # Verify this is a streaming table write action from template
            assert "dlt.create_streaming_table" in generated_code, \
                "Template should generate streaming table write action"

    def test_preset_only_flowgroup_still_works(self):
        """Test that preset-only flowgroups (no templates) still work correctly."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            
            # Create project structure
            self._create_project_directories(project_root)
            
            # Create preset
            self._create_test_preset(project_root)
            
            # Create flowgroup with preset but NO template
            preset_only_flowgroup = {
                "pipeline": "test_pipeline",
                "flowgroup": "preset_only_test",
                "presets": ["delta_optimization"],
                "actions": [
                    {
                        "name": "load_test_data",
                        "type": "load",
                        "source": {
                            "type": "sql",
                            "sql": "SELECT 1 as test_col"
                        },
                        "target": "v_test_data"
                    },
                    {
                        "name": "write_direct",
                        "type": "write",
                        "source": "v_test_data",
                        "write_target": {
                            "type": "streaming_table",
                            "database": "bronze.test",
                            "table": "direct_write",
                            "table_properties": {
                                "manual": "property"
                            }
                        }
                    }
                ]
            }
            
            flowgroup_file = project_root / "pipelines" / "test_pipeline" / "preset_only_test.yaml"
            with open(flowgroup_file, "w") as f:
                yaml.dump(preset_only_flowgroup, f)
            
            # Create substitutions
            self._create_substitutions(project_root)
            
            # Generate code
            orchestrator = ActionOrchestrator(project_root)
            generated_files = orchestrator.generate_pipeline("test_pipeline", "dev")
            
            # Get generated code
            generated_code = generated_files.get("preset_only_test.py", "")
            
            # Assert preset was applied to direct action
            assert "delta.enableRowTracking" in generated_code, \
                "Preset should be applied to direct write action"
            
            assert "manual" in generated_code, \
                "Original table properties should be preserved"

    def test_template_only_flowgroup_still_works(self):
        """Test that template-only flowgroups (no presets) still work correctly."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            
            # Create project structure
            self._create_project_directories(project_root)
            
            # Create template
            self._create_test_template(project_root)
            
            # Create flowgroup with template but NO preset
            template_only_flowgroup = {
                "pipeline": "test_pipeline",
                "flowgroup": "template_only_test",
                "use_template": "data_ingestion",
                "template_parameters": {
                    "table_name": "orders_data",
                    "database": "silver.orders"
                }
            }
            
            flowgroup_file = project_root / "pipelines" / "test_pipeline" / "template_only_test.yaml"
            with open(flowgroup_file, "w") as f:
                yaml.dump(template_only_flowgroup, f)
            
            # Create substitutions
            self._create_substitutions(project_root)
            
            # Generate code
            orchestrator = ActionOrchestrator(project_root)
            generated_files = orchestrator.generate_pipeline("test_pipeline", "dev")
            
            # Get generated code
            generated_code = generated_files.get("template_only_test.py", "")
            
            # Assert template was expanded correctly
            assert "orders_data" in generated_code, \
                "Template should be expanded with parameters"
            
            assert "template_generated" in generated_code, \
                "Template properties should be preserved"
            
            # Should NOT have preset properties
            assert "delta.enableRowTracking" not in generated_code, \
                "Should not have preset properties when no preset is used"

    def test_preset_inheritance_with_templates(self):
        """Test preset inheritance works correctly with templates."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            
            # Create project structure
            self._create_project_directories(project_root)
            
            # Create base preset
            base_preset = {
                "name": "base_optimization",
                "version": "1.0",
                "defaults": {
                    "write_actions": {
                        "streaming_table": {
                            "table_properties": {
                                "base.setting": "true"
                            }
                        }
                    }
                }
            }
            
            base_preset_file = project_root / "presets" / "base_optimization.yaml"
            with open(base_preset_file, "w") as f:
                yaml.dump(base_preset, f)
            
            # Create child preset that extends base
            child_preset = {
                "name": "enhanced_optimization",
                "version": "1.0",
                "extends": "base_optimization",
                "defaults": {
                    "write_actions": {
                        "streaming_table": {
                            "table_properties": {
                                "child.setting": "enhanced",
                                "delta.enableRowTracking": "true"
                            }
                        }
                    }
                }
            }
            
            child_preset_file = project_root / "presets" / "enhanced_optimization.yaml"
            with open(child_preset_file, "w") as f:
                yaml.dump(child_preset, f)
            
            # Create template
            self._create_test_template(project_root)
            
            # Create flowgroup using child preset and template
            inheritance_flowgroup = {
                "pipeline": "test_pipeline",
                "flowgroup": "inheritance_test",
                "presets": ["enhanced_optimization"],
                "use_template": "data_ingestion",
                "template_parameters": {
                    "table_name": "inherited_data",
                    "database": "gold.analytics"
                }
            }
            
            flowgroup_file = project_root / "pipelines" / "test_pipeline" / "inheritance_test.yaml"
            with open(flowgroup_file, "w") as f:
                yaml.dump(inheritance_flowgroup, f)
            
            # Create substitutions
            self._create_substitutions(project_root)
            
            # Generate code
            orchestrator = ActionOrchestrator(project_root)
            generated_files = orchestrator.generate_pipeline("test_pipeline", "dev")
            
            # Get generated code
            generated_code = generated_files.get("inheritance_test.py", "")
            
            # Assert both base and child preset properties are applied
            assert "base.setting" in generated_code, \
                "Base preset properties should be inherited"
            
            assert "child.setting" in generated_code, \
                "Child preset properties should be applied"
            
            assert "delta.enableRowTracking" in generated_code, \
                "Child preset should override/add properties"
            
            # Template should work correctly
            assert "inherited_data" in generated_code, \
                "Template should be expanded with parameters"

    def _create_project_directories(self, project_root: Path):
        """Create required project directory structure."""
        for dir_name in ['presets', 'templates', 'pipelines/test_pipeline', 'substitutions']:
            (project_root / dir_name).mkdir(parents=True)

    def _create_test_preset(self, project_root: Path):
        """Create test preset with write_actions configuration."""
        preset_content = {
            "name": "delta_optimization",
            "version": "1.0",
            "description": "Preset with Delta table optimizations",
            "defaults": {
                "write_actions": {
                    "streaming_table": {
                        "table_properties": {
                            "delta.enableRowTracking": "true",
                            "delta.autoOptimize.optimizeWrite": "true",
                            "delta.autoOptimize.autoCompact": "true"
                        }
                    }
                }
            }
        }
        
        preset_file = project_root / "presets" / "delta_optimization.yaml"
        with open(preset_file, "w") as f:
            yaml.dump(preset_content, f)

    def _create_test_template(self, project_root: Path):
        """Create test template that generates write actions."""
        template_content = {
            "name": "data_ingestion",
            "version": "1.0",
            "description": "Template for data ingestion with write action",
            "parameters": [
                {"name": "table_name", "type": "string", "required": True},
                {"name": "database", "type": "string", "required": True}
            ],
            "actions": [
                {
                    "name": "load_{{ table_name }}",
                    "type": "load",
                    "source": {
                        "type": "sql",
                        "sql": "SELECT * FROM source_{{ table_name }}"
                    },
                    "target": "v_{{ table_name }}_raw"
                },
                {
                    "name": "write_{{ table_name }}",
                    "type": "write",
                    "source": "v_{{ table_name }}_raw",
                    "write_target": {
                        "type": "streaming_table",
                        "database": "{{ database }}",
                        "table": "{{ table_name }}",
                        "table_properties": {
                            "source": "template_generated"
                        }
                    }
                }
            ]
        }
        
        template_file = project_root / "templates" / "data_ingestion.yaml"
        with open(template_file, "w") as f:
            yaml.dump(template_content, f)

    def _create_test_flowgroup(self, project_root: Path):
        """Create flowgroup that uses both preset and template."""
        flowgroup_content = {
            "pipeline": "test_pipeline",
            "flowgroup": "preset_template_test",
            "presets": ["delta_optimization"],
            "use_template": "data_ingestion",
            "template_parameters": {
                "table_name": "customer_data",
                "database": "bronze.customers"
            }
        }
        
        flowgroup_file = project_root / "pipelines" / "test_pipeline" / "preset_template_test.yaml"
        with open(flowgroup_file, "w") as f:
            yaml.dump(flowgroup_content, f)

    def _create_substitutions(self, project_root: Path):
        """Create substitution file for environment."""
        substitutions = {
            "catalog": "dev_catalog",
            "raw_schema": "raw",
            "bronze_schema": "bronze"
        }
        
        substitution_file = project_root / "substitutions" / "dev.yaml"
        with open(substitution_file, "w") as f:
            yaml.dump(substitutions, f)

    def test_template_preset_applies_to_template_actions(self):
        """Test that presets defined IN the template are applied to template actions.
        
        This test validates that when a template declares presets, those presets
        are applied to all actions generated from that template, even when the
        flowgroup using the template does not declare any presets.
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            self._create_project_directories(project_root)
            
            # Create preset with template marker
            preset = {
                'name': 'template_test_preset',
                'version': '1.0',
                'defaults': {
                    'write_actions': {
                        'streaming_table': {
                            'table_properties': {
                                'template.preset.applied': 'true',
                                'delta.enableRowTracking': 'true'
                            }
                        }
                    }
                }
            }
            with open(project_root / 'presets' / 'template_test_preset.yaml', 'w') as f:
                yaml.dump(preset, f)
            
            # Create template WITH presets field
            template = {
                'name': 'template_with_preset',
                'version': '1.0',
                'presets': ['template_test_preset'],
                'parameters': [{'name': 'table_name', 'type': 'string', 'required': True}],
                'actions': [
                    {
                        'name': 'load_{{ table_name }}',
                        'type': 'load',
                        'source': {'type': 'sql', 'sql': 'SELECT 1 as id'},
                        'target': 'v_{{ table_name }}'
                    },
                    {
                        'name': 'write_{{ table_name }}',
                        'type': 'write',
                        'source': 'v_{{ table_name }}',
                        'write_target': {
                            'type': 'streaming_table',
                            'database': 'test_db',
                            'table': '{{ table_name }}'
                        }
                    }
                ]
            }
            with open(project_root / 'templates' / 'template_with_preset.yaml', 'w') as f:
                yaml.dump(template, f)
            
            # Create flowgroup using template (NO flowgroup presets)
            flowgroup = {
                'pipeline': 'test_pipeline',
                'flowgroup': 'template_preset_test',
                'use_template': 'template_with_preset',
                'template_parameters': {'table_name': 'test_table'}
            }
            with open(project_root / 'pipelines' / 'test_pipeline' / 'template_preset_test.yaml', 'w') as f:
                yaml.dump(flowgroup, f)
            
            self._create_substitutions(project_root)
            
            # Create lhp.yaml
            lhp_config = {'name': 'test_project', 'version': '1.0'}
            with open(project_root / 'lhp.yaml', 'w') as f:
                yaml.dump(lhp_config, f)
            
            orchestrator = ActionOrchestrator(project_root, enforce_version=False)
            result = orchestrator.generate_pipeline('test_pipeline', 'dev')
            generated_code = result.get('template_preset_test.py', '')
            
            assert 'template.preset.applied' in generated_code, \
                "Template preset property should be applied to generated actions"
            assert 'delta.enableRowTracking' in generated_code, \
                "Template preset property should be applied to generated actions"

    def test_template_and_flowgroup_presets_both_apply(self):
        """Test that both template and flowgroup presets apply, with flowgroup precedence.
        
        When both template and flowgroup declare presets, both should be applied
        with flowgroup presets taking precedence (more specific overrides general).
        """
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            self._create_project_directories(project_root)
            
            # Create template preset
            template_preset = {
                'name': 'template_preset',
                'version': '1.0',
                'defaults': {
                    'write_actions': {
                        'streaming_table': {
                            'table_properties': {
                                'from.template': 'true',
                                'shared.property': 'template_value'
                            }
                        }
                    }
                }
            }
            with open(project_root / 'presets' / 'template_preset.yaml', 'w') as f:
                yaml.dump(template_preset, f)
            
            # Create flowgroup preset
            flowgroup_preset = {
                'name': 'flowgroup_preset',
                'version': '1.0',
                'defaults': {
                    'write_actions': {
                        'streaming_table': {
                            'table_properties': {
                                'from.flowgroup': 'true',
                                'shared.property': 'flowgroup_value'
                            }
                        }
                    }
                }
            }
            with open(project_root / 'presets' / 'flowgroup_preset.yaml', 'w') as f:
                yaml.dump(flowgroup_preset, f)
            
            # Create template with preset
            template = {
                'name': 'template_with_preset',
                'version': '1.0',
                'presets': ['template_preset'],
                'parameters': [{'name': 'table_name', 'type': 'string', 'required': True}],
                'actions': [
                    {
                        'name': 'load_{{ table_name }}',
                        'type': 'load',
                        'source': {'type': 'sql', 'sql': 'SELECT 1 as id'},
                        'target': 'v_{{ table_name }}'
                    },
                    {
                        'name': 'write_{{ table_name }}',
                        'type': 'write',
                        'source': 'v_{{ table_name }}',
                        'write_target': {
                            'type': 'streaming_table',
                            'database': 'test_db',
                            'table': '{{ table_name }}'
                        }
                    }
                ]
            }
            with open(project_root / 'templates' / 'template_with_preset.yaml', 'w') as f:
                yaml.dump(template, f)
            
            # Create flowgroup with preset
            flowgroup = {
                'pipeline': 'test_pipeline',
                'flowgroup': 'combined_preset_test',
                'presets': ['flowgroup_preset'],
                'use_template': 'template_with_preset',
                'template_parameters': {'table_name': 'test_table'}
            }
            with open(project_root / 'pipelines' / 'test_pipeline' / 'combined_preset_test.yaml', 'w') as f:
                yaml.dump(flowgroup, f)
            
            self._create_substitutions(project_root)
            
            # Create lhp.yaml
            lhp_config = {'name': 'test_project', 'version': '1.0'}
            with open(project_root / 'lhp.yaml', 'w') as f:
                yaml.dump(lhp_config, f)
            
            orchestrator = ActionOrchestrator(project_root, enforce_version=False)
            result = orchestrator.generate_pipeline('test_pipeline', 'dev')
            generated_code = result.get('combined_preset_test.py', '')
            
            # Both presets should be applied
            assert 'from.template' in generated_code, \
                "Template preset properties should be applied"
            assert 'from.flowgroup' in generated_code, \
                "Flowgroup preset properties should be applied"
            # Flowgroup preset should override shared property
            assert 'flowgroup_value' in generated_code, \
                "Flowgroup preset should override template preset for shared properties"

    def test_template_with_missing_preset_raises_error(self):
        """Test that referencing a non-existent preset raises a clear error."""
        with tempfile.TemporaryDirectory() as tmpdir:
            project_root = Path(tmpdir)
            self._create_project_directories(project_root)
            
            # Create template referencing non-existent preset
            template = {
                'name': 'template_with_missing_preset',
                'version': '1.0',
                'presets': ['non_existent_preset'],
                'parameters': [{'name': 'table_name', 'type': 'string', 'required': True}],
                'actions': [
                    {
                        'name': 'load_{{ table_name }}',
                        'type': 'load',
                        'source': {'type': 'sql', 'sql': 'SELECT 1'},
                        'target': 'v_{{ table_name }}'
                    },
                    {
                        'name': 'write_{{ table_name }}',
                        'type': 'write',
                        'source': 'v_{{ table_name }}',
                        'write_target': {
                            'type': 'streaming_table',
                            'database': 'test_db',
                            'table': '{{ table_name }}'
                        }
                    }
                ]
            }
            with open(project_root / 'templates' / 'template_with_missing_preset.yaml', 'w') as f:
                yaml.dump(template, f)
            
            flowgroup = {
                'pipeline': 'test_pipeline',
                'flowgroup': 'missing_preset_test',
                'use_template': 'template_with_missing_preset',
                'template_parameters': {'table_name': 'test_table'}
            }
            with open(project_root / 'pipelines' / 'test_pipeline' / 'missing_preset_test.yaml', 'w') as f:
                yaml.dump(flowgroup, f)
            
            self._create_substitutions(project_root)
            
            # Create lhp.yaml
            lhp_config = {'name': 'test_project', 'version': '1.0'}
            with open(project_root / 'lhp.yaml', 'w') as f:
                yaml.dump(lhp_config, f)
            
            orchestrator = ActionOrchestrator(project_root, enforce_version=False)
            
            with pytest.raises(ValueError) as exc_info:
                orchestrator.generate_pipeline('test_pipeline', 'dev')
            
            assert 'non_existent_preset' in str(exc_info.value)
            assert 'not found' in str(exc_info.value).lower() 