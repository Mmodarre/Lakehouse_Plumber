# Generated by LakehousePlumber
# Pipeline: acmi_edw_tests
# FlowGroup: silver_layer_tests

from pyspark.sql.functions import *
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_tests"
FLOWGROUP_ID = "silver_layer_tests"


# ============================================================================
# DATA QUALITY TESTS
# ============================================================================


@dlt.expect_all_or_fail({"no_duplicates": "duplicate_count == 0"})
@dlt.table(
    name="tmp_test_test_customer_dim_sk",
    comment="Ensure customer surrogate keys are unique",
    temporary=True,
)
def tmp_test_test_customer_dim_sk():
    """Ensure customer surrogate keys are unique"""
    return spark.sql(
        """
        SELECT customer_key, COUNT(*) as duplicate_count
                    FROM acme_edw_tst.edw_silver.customer_dim
                    GROUP BY customer_key
                    HAVING COUNT(*) > 1
    """
    )


@dlt.expect_all_or_fail({"all_lookups_found": "lookup_customer_key IS NOT NULL"})
@dlt.table(
    name="tmp_test_test_customer_dim_coverage",
    comment="All bronze customers must have silver dimension records",
    temporary=True,
)
def tmp_test_test_customer_dim_coverage():
    """All bronze customers must have silver dimension records"""
    return spark.sql(
        """
        SELECT
                      s.*,
                      l.customer_key as lookup_customer_key
                    FROM acme_edw_tst.edw_bronze.customer s
                    LEFT JOIN acme_edw_tst.edw_silver.customer_dim l ON s.customer_key = l.customer_key
    """
    )


@dlt.expect_all_or_fail({"all_lookups_found": "lookup_nation_key IS NOT NULL"})
@dlt.table(
    name="tmp_test_test_customer_nation_lookup",
    comment="All customer nations must exist in nation dimension",
    temporary=True,
)
def tmp_test_test_customer_nation_lookup():
    """All customer nations must exist in nation dimension"""
    return spark.sql(
        """
        SELECT
                      s.*,
                      l.nation_key as lookup_nation_key
                    FROM acme_edw_tst.edw_silver.customer_dim s
                    LEFT JOIN acme_edw_tst.edw_silver.nation_dim l ON s.nation_key = l.nation_key
    """
    )


@dlt.expect_all_or_fail({"failed_row_count": "failed_row_count == 0"})
@dlt.table(
    name="tmp_test_test_lineitem_fact_totals",
    comment="Validate fact table aggregations are reasonable",
    temporary=True,
)
def tmp_test_test_lineitem_fact_totals():
    """Validate fact table aggregations are reasonable"""
    return spark.sql(
        """
        SELECT
          COUNT(*) as failed_row_count
          FROM (
            SELECT
              order_id,
              SUM(quantity) as total_quantity,
              SUM(extended_price) as total_price,
              SUM(discount * extended_price) as total_discount,
              SUM(tax * extended_price) as total_tax
            FROM acme_edw_tst.edw_silver.lineitem_fct
            GROUP BY order_id
            HAVING SUM(quantity) <= 0 OR SUM(extended_price) < 0
        )
    """
    )


@dlt.expect_all_or_fail(
    {
        "required_fields_complete": "customer_key IS NOT NULL AND customer_id IS NOT NULL AND name IS NOT NULL AND address IS NOT NULL AND nation_id IS NOT NULL AND phone IS NOT NULL"
    }
)
@dlt.table(
    name="tmp_test_test_silver_dim_completeness",
    comment="Ensure all required dimension attributes are populated",
    temporary=True,
)
def tmp_test_test_silver_dim_completeness():
    """Ensure all required dimension attributes are populated"""
    return spark.sql(
        """
        SELECT customer_key, customer_id, name, address, nation_id, phone
                    FROM acme_edw_tst.edw_silver.customer_dim
    """
    )


@dlt.expect_all_or_fail({"no_duplicates": "duplicate_count == 0"})
@dlt.table(
    name="tmp_test_test_customer_dim_active_unique",
    comment="Only one active record should exist per customer (Type 2 dimension)",
    temporary=True,
)
def tmp_test_test_customer_dim_active_unique():
    """Only one active record should exist per customer (Type 2 dimension)"""
    return spark.sql(
        """
        SELECT customer_id, COUNT(*) as duplicate_count
                    FROM acme_edw_tst.edw_silver.customer_dim
                    WHERE __END_AT IS NULL
                    GROUP BY customer_id
                    HAVING COUNT(*) > 1
    """
    )


@dlt.expect_all_or_fail({"all_fact_customers_in_dim": "fact_count <= dim_count"})
@dlt.table(
    name="tmp_test_test_fact_dimension_balance",
    comment="All customers in facts must exist in dimensions",
    temporary=True,
)
def tmp_test_test_fact_dimension_balance():
    """All customers in facts must exist in dimensions"""
    return spark.sql(
        """
        WITH fact_customers AS (
          SELECT DISTINCT customer_key FROM acme_edw_tst.edw_silver.orders_fct
        ),
        dim_customers AS (
          SELECT DISTINCT customer_key FROM acme_edw_tst.edw_silver.customer_dim
        )
        SELECT
          (SELECT COUNT(*) FROM fact_customers) as fact_count,
          (SELECT COUNT(*) FROM dim_customers) as dim_count
    """
    )
