# Generated by LakehousePlumber
# Pipeline: acmi_edw_raw
# FlowGroup: customer_ingestion_incremental

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_raw"
FLOWGROUP_ID = "customer_ingestion_incremental"


# ============================================================================
# SOURCE VIEWS
# ============================================================================

# Schema hints for customer_cloudfiles table
customer_cloudfiles_schema_hints = """
    c_custkey BIGINT,
    c_name STRING,
    c_address STRING,
    c_nationkey BIGINT,
    c_phone STRING,
    c_acctbal DECIMAL(18,2),
    c_mktsegment STRING,
    c_comment STRING,
    last_modified_dt TIMESTAMP
""".strip().replace(
    "\n", " "
)


@dlt.view()
def v_customer_raw_cloudfiles():
    """Load customer_raw CSV files from landing volume"""
    df = (
        spark.readStream.format("cloudFiles")
        .option("cloudFiles.format", "csv")
        .option("header", "True")
        .option("delimiter", ",")
        .option("cloudFiles.maxFilesPerTrigger", "50")
        .option("cloudFiles.inferColumnTypes", False)
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns")
        .option("cloudFiles.rescuedDataColumn", "_rescued_data")
        .option("cloudFiles.schemaHints", customer_cloudfiles_schema_hints)
        .load("/Volumes/acme_edw_dev/edw_raw/incoming_volume/customer/*.csv")
    )

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())
    df = df.withColumn("_source_file_path", F.col("_metadata.file_path"))

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_dev.edw_raw.customer_raw",
    comment="Streaming table: customer_raw",
    table_properties={"PII": "true", "delta.enableRowTracking": "true"},
    cluster_by=["c_name"],
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_dev.edw_raw.customer_raw",
    name="f_customer_raw_cloudfiles",
    comment="Append flow to acme_edw_dev.edw_raw.customer_raw",
)
def f_customer_raw_cloudfiles():
    """Append flow to acme_edw_dev.edw_raw.customer_raw"""
    # Streaming flow
    df = spark.readStream.table("v_customer_raw_cloudfiles")

    return df
