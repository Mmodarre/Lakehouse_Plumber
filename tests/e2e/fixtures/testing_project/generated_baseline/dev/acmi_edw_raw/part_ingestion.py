# Generated by LakehousePlumber
# Pipeline: acmi_edw_raw
# FlowGroup: part_ingestion

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_raw"
FLOWGROUP_ID = "part_ingestion"


# ============================================================================
# SOURCE VIEWS
# ============================================================================

# Schema hints for part_cloudfiles table
part_cloudfiles_schema_hints = """
    p_partkey BIGINT,
    p_name STRING,
    p_mfgr STRING,
    p_brand STRING,
    p_type STRING,
    p_size INT,
    p_container STRING,
    p_retailprice DECIMAL(18,2),
    p_comment STRING,
    last_modified_dt TIMESTAMP
""".strip().replace(
    "\n", " "
)


@dlt.view()
def v_part_raw_cloudfiles():
    """Load part_raw JSON files from landing volume"""
    df = (
        spark.readStream.format("cloudFiles")
        .option("cloudFiles.format", "json")
        .option("cloudFiles.maxFilesPerTrigger", 50)
        .option("cloudFiles.inferColumnTypes", True)
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns")
        .option("cloudFiles.rescuedDataColumn", "_rescued_data")
        .option("cloudFiles.schemaHints", part_cloudfiles_schema_hints)
        .load("/Volumes/acme_edw_dev/edw_raw/incoming_volume/part/*.json")
    )

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())
    df = df.withColumn("_source_file_path", F.col("_metadata.file_path"))

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_dev.edw_raw.part_raw",
    comment="Streaming table: part_raw",
    table_properties={
        "delta.enableRowTracking": "true",
        "delta.autoOptimize.optimizeWrite": "true",
        "delta.autoOptimize.autoCompact": "true",
        "delta.enableChangeDataFeed": "true",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_dev.edw_raw.part_raw",
    name="f_part_raw_cloudfiles",
    comment="Append flow to acme_edw_dev.edw_raw.part_raw",
)
def f_part_raw_cloudfiles():
    """Append flow to acme_edw_dev.edw_raw.part_raw"""
    # Streaming flow
    df = spark.readStream.table("v_part_raw_cloudfiles")

    return df
