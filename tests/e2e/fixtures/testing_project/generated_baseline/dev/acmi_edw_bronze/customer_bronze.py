# Generated by LakehousePlumber
# Pipeline: acmi_edw_bronze
# FlowGroup: customer_bronze

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_bronze"
FLOWGROUP_ID = "customer_bronze"


# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_customer_raw():
    """Load customer table from raw schema"""
    df = spark.readStream.table("acme_edw_dev.edw_raw.customer_raw")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


@dlt.view()
def v_customer_migration():
    """Load customer table from migration schema"""
    df = spark.read.table("acme_edw_dev.edw_old.customer")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: customer_bronze_incremental_cleanse")
def v_customer_bronze_cleaned():
    """SQL transform: customer_bronze_incremental_cleanse"""
    df = spark.sql(
        """SELECT
  xxhash64(c_custkey,c_name,c_address,c_nationkey,c_phone,c_acctbal,c_mktsegment,c_comment,last_modified_dt) as customer_key,
  c_custkey as customer_id,
  c_name as name,
  c_address as address,
  c_nationkey as nation_id,
  c_phone as phone,
  c_acctbal as account_balance,
  c_mktsegment as market_segment,
  c_comment as comment,
  last_modified_dt,
  * EXCEPT(c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment,last_modified_dt,_rescued_data)
FROM stream(v_customer_raw)"""
    )

    return df


@dlt.view(comment="SQL transform: customer_migration_cleanse")
def v_customer_migration_cleaned():
    """SQL transform: customer_migration_cleanse"""
    df = spark.sql(
        """SELECT
  xxhash64(c_custkey,c_name,c_address,c_nationkey,c_phone,c_acctbal,c_mktsegment,c_comment,cast(last_modified_dt as TIMESTAMP)) as customer_key,
  c_custkey as customer_id,
  c_name as name,
  c_address as address,
  c_nationkey as nation_id,
  c_phone as phone,
  c_acctbal as account_balance,
  c_mktsegment as market_segment,
  c_comment as comment,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  'MIGRATION' as _source_file_path,
  * EXCEPT(c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment,last_modified_dt)
FROM v_customer_migration"""
    )

    return df


rules_fail = {
    "valid_custkey": "customer_id IS NOT NULL AND customer_id > 0",
    "valid_customer_name": "name IS NOT NULL AND LENGTH(TRIM(name)) > 0",
    "valid_nation_key": "nation_id IS NOT NULL AND nation_id >= 0",
}
rules_warn = {
    "valid_phone_format": "phone IS NULL OR LENGTH(phone) >= 10",
    "valid_account_balance": "account_balance IS NULL OR account_balance >= -10000",
    "valid_market_segment": "market_segment IS NULL OR market_segment IN ('BUILDING', 'FURNITURE', 'HOUSEHOLD', 'MACHINERY')",
}


@dlt.view()
# These expectations will fail the pipeline if violated
@dlt.expect_all_or_fail(rules_fail)
# These expectations will log warnings but not drop rows
@dlt.expect_all(rules_warn)
def v_customer_bronze_DQE():
    """Apply data quality checks to customer"""
    df = spark.readStream.table("v_customer_bronze_cleaned")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_dev.edw_bronze.customer",
    comment="Streaming table: customer",
    table_properties={"delta.enableRowTracking": "true"},
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_dev.edw_bronze.customer",
    name="f_customer_migration",
    once=True,
    comment="Append flow to acme_edw_dev.edw_bronze.customer",
)
def f_customer_migration():
    """Append flow to acme_edw_dev.edw_bronze.customer"""
    # One-time flow (backfill)
    df = spark.read.table("v_customer_migration_cleaned")

    return df


@dlt.append_flow(
    target="acme_edw_dev.edw_bronze.customer",
    name="f_customer_bronze_incremental",
    comment="Append flow to acme_edw_dev.edw_bronze.customer",
)
def f_customer_bronze_incremental():
    """Append flow to acme_edw_dev.edw_bronze.customer"""
    # Streaming flow
    df = spark.readStream.table("v_customer_bronze_DQE")

    return df
