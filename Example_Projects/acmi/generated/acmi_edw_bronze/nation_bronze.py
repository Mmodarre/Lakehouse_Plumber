# Generated by LakehousePlumber
# Pipeline: acmi_edw_bronze
# FlowGroup: nation_bronze

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_bronze"
FLOWGROUP_ID = "nation_bronze"



# ============================================================================
# SOURCE VIEWS
# ============================================================================

@dlt.view()
def v_nation_raw():
    """Load nation table from raw schema"""
    df = spark.readStream \
        .table("acme_edw_dev.edw_raw.nation_raw")

    # Add operational metadata columns
    df = df.withColumn('_processing_timestamp', F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================

@dlt.view(comment="SQL transform: nation_bronze_incremental_cleanse")
def v_nation_bronze_cleaned():
    """SQL transform: nation_bronze_incremental_cleanse"""
    df = spark.sql("""SELECT
  xxhash64(n_name,n_regionkey,n_comment) as nation_key,
  n_name as name,
  n_regionkey as region_id,
  n_comment as comment,
  * EXCEPT(n_nationkey, n_name, n_regionkey, n_comment,_rescued_data)
FROM stream(v_nation_raw)""")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_dev.edw_bronze.nation",
    comment="Streaming table: nation")


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_dev.edw_bronze.nation",
    name="f_nation_bronze_incremental",
    comment="Append flow to acme_edw_dev.edw_bronze.nation"
)
def f_nation_bronze_incremental():
    """Append flow to acme_edw_dev.edw_bronze.nation"""
    # Streaming flow
    df = spark.readStream.table("v_nation_bronze_cleaned")

    return df
