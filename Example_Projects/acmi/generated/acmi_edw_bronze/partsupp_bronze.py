# Generated by LakehousePlumber
# Pipeline: acmi_edw_bronze
# FlowGroup: partsupp_bronze

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_bronze"
FLOWGROUP_ID = "partsupp_bronze"



# ============================================================================
# SOURCE VIEWS
# ============================================================================

@dlt.view()
def v_partsupp_raw():
    """Load partsupp table from raw schema"""
    df = spark.readStream \
        .table("acme_edw_dev.edw_raw.partsupp_raw")

    # Add operational metadata columns
    df = df.withColumn('_processing_timestamp', F.current_timestamp())

    return df

@dlt.view()
def v_partsupp_migration():
    """Load partsupp table from migration schema"""
    df = spark.read.table("acme_edw_dev.edw_old.partsupp")

    # Add operational metadata columns
    df = df.withColumn('_processing_timestamp', F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================

@dlt.view(comment="SQL transform: partsupp_bronze_incremental_cleanse")
def v_partsupp_bronze_cleaned():
    """SQL transform: partsupp_bronze_incremental_cleanse"""
    df = spark.sql("""SELECT
  xxhash64(ps_partkey,ps_suppkey,ps_availqty,ps_supplycost,ps_comment) as partsupp_key,
  ps_partkey as part_id,
  ps_suppkey as supplier_id,
  ps_availqty as available_quantity,
  cast(ps_supplycost as decimal(18,2)) as supply_cost,
  ps_comment as comment,
  split(split(_source_file_path, '/partsupp/')[1], '/')[0] as snapshot_id,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  * EXCEPT(ps_partkey, ps_suppkey, ps_availqty, ps_supplycost, ps_comment, last_modified_dt,_rescued_data)
FROM stream(v_partsupp_raw)""")

    return df

@dlt.view(comment="SQL transform: partsupp_migration_bronze_cleanse")
def v_partsupp_migration_bronze_cleaned():
    """SQL transform: partsupp_migration_bronze_cleanse"""
    df = spark.sql("""SELECT
  xxhash64(ps_partkey,ps_suppkey,ps_availqty,ps_supplycost,ps_comment) as partsupp_key,
  ps_partkey as part_id,
  ps_suppkey as supplier_id,
  ps_availqty as available_quantity,
  ps_supplycost as supply_cost,
  ps_comment as comment,
  '2019-W01' as snapshot_id,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  'MIGRATION' as _source_file_path,
  * EXCEPT(ps_partkey, ps_suppkey, ps_availqty, ps_supplycost, ps_comment, last_modified_dt)
FROM v_partsupp_migration""")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_dev.edw_bronze.partsupp",
    comment="Streaming table: partsupp",
    partition_cols=["snapshot_id"])


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_dev.edw_bronze.partsupp",
    name="f_partsupp_bronze_incremental",
    comment="Append flow to acme_edw_dev.edw_bronze.partsupp"
)
def f_partsupp_bronze_incremental():
    """Append flow to acme_edw_dev.edw_bronze.partsupp"""
    # Streaming flow
    df = spark.readStream.table("v_partsupp_bronze_cleaned")

    return df
@dlt.append_flow(
    target="acme_edw_dev.edw_bronze.partsupp",
    name="f_partsupp_migration_bronze",
once=True,    comment="Append flow to acme_edw_dev.edw_bronze.partsupp"
)
def f_partsupp_migration_bronze():
    """Append flow to acme_edw_dev.edw_bronze.partsupp"""
    # One-time flow (backfill)
    df = spark.read.table("v_partsupp_migration_bronze_cleaned")

    return df
