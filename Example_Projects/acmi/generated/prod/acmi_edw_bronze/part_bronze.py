# Generated by LakehousePlumber
# Pipeline: acmi_edw_bronze
# FlowGroup: part_bronze

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_bronze"
FLOWGROUP_ID = "part_bronze"


# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_part_raw():
    """Load part table from raw schema"""
    df = spark.readStream.table("acme_edw_prod.edw_raw.part_raw")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


@dlt.view()
def v_part_migration():
    """Load part table from migration schema"""
    df = spark.read.table("acme_edw_prod.edw_old.part")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: part_bronze_incremental_cleanse")
def v_part_bronze_cleaned():
    """SQL transform: part_bronze_incremental_cleanse"""
    df = spark.sql(
        """SELECT
  xxhash64(p_partkey,p_name,p_mfgr,p_brand,p_type,p_size,p_container,p_retailprice,p_comment,split(split(_source_file_path, '/partsupp/')[1], '/')[0]) as part_key,
  p_partkey as part_id,
  p_name as name,
  p_mfgr as manufacturer,
  p_brand as brand,
  p_type as type,
  p_size as size,
  p_container as container,
  p_retailprice as retail_price,
  p_comment as comment,
  cast(extract_timestamp as TIMESTAMP) as extract_timestamp,
  source_system,
  cast(source_system_timestamp as TIMESTAMP) as source_system_timestamp,
  replace(split(split(_source_file_path, '/part/')[1], '/')[0], '-W', '') as snapshot_id,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  * EXCEPT(p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment, last_modified_dt,_rescued_data,extract_timestamp,source_system,source_system_timestamp)
FROM stream(v_part_raw)"""
    )

    return df


@dlt.view(comment="SQL transform: part_migration_bronze_cleanse")
def v_part_migration_bronze_cleaned():
    """SQL transform: part_migration_bronze_cleanse"""
    df = spark.sql(
        """SELECT
  xxhash64(p_partkey,p_name,p_mfgr,p_brand,p_type,p_size,p_container,p_retailprice,p_comment,'2019-W01') as part_key,
  p_partkey as part_id,
  p_name as name,
  p_mfgr as manufacturer,
  p_brand as brand,
  p_type as type,
  p_size as size,
  p_container as container,
  p_retailprice as retail_price,
  p_comment as comment,
  now() as extract_timestamp,
  "DW MIGRATION" as source_system,
  null as source_system_timestamp,
  '201901' as snapshot_id,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  'MIGRATION' as _source_file_path,
  * EXCEPT(p_partkey, p_name, p_mfgr, p_brand, p_type, p_size, p_container, p_retailprice, p_comment, last_modified_dt)
FROM v_part_migration"""
    )

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_prod.edw_bronze.part",
    comment="Streaming table: part",
    table_properties={"delta.enableRowTracking": "true"},
    partition_cols=["snapshot_id"],
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_prod.edw_bronze.part",
    name="f_part_bronze_incremental",
    comment="Append flow to acme_edw_prod.edw_bronze.part",
)
def f_part_bronze_incremental():
    """Append flow to acme_edw_prod.edw_bronze.part"""
    # Streaming flow
    df = spark.readStream.table("v_part_bronze_cleaned")

    return df


@dlt.append_flow(
    target="acme_edw_prod.edw_bronze.part",
    name="f_part_migration_bronze",
    once=True,
    comment="Append flow to acme_edw_prod.edw_bronze.part",
)
def f_part_migration_bronze():
    """Append flow to acme_edw_prod.edw_bronze.part"""
    # One-time flow (backfill)
    df = spark.read.table("v_part_migration_bronze_cleaned")

    return df
