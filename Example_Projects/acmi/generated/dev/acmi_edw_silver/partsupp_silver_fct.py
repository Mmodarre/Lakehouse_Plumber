# Generated by LakehousePlumber
# Pipeline: acmi_edw_silver
# FlowGroup: partsupp_silver_fct

import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_silver"
FLOWGROUP_ID = "partsupp_silver_fct"


# ============================================================================
# TARGET TABLES
# ============================================================================

# Snapshot function embedded directly in generated code
from pyspark.sql import DataFrame
from typing import Optional, Tuple


def next_snapshot_and_version(
    latest_snapshot_version: Optional[int],
) -> Optional[Tuple[DataFrame, int]]:

    if latest_snapshot_version is None:
        df = spark.sql(
            """
            SELECT * FROM acme_edw_dev.edw_bronze.partsupp
            WHERE snapshot_id = (SELECT min(snapshot_id) FROM acme_edw_dev.edw_bronze.partsupp)
        """
        )

        min_snapshot_id = (
            spark.sql(
                """
            SELECT min(snapshot_id) as min_id FROM acme_edw_dev.edw_bronze.partsupp
        """
            )
            .collect()[0]
            .min_id
        )

        return (df, min_snapshot_id)

    else:
        next_snapshot_result = spark.sql(
            f"""
            SELECT min(snapshot_id) as next_id
            FROM acme_edw_dev.edw_bronze.partsupp
            WHERE snapshot_id > '{latest_snapshot_version}'
        """
        ).collect()[0]

        if next_snapshot_result.next_id is None:
            return None

        next_snapshot_id = next_snapshot_result.next_id
        df = spark.sql(
            f"""
            SELECT * except(rn) FROM (
                SELECT *,
                ROW_NUMBER() OVER (PARTITION BY part_id, supplier_id ORDER BY last_modified_dt DESC) as rn
                FROM acme_edw_dev.edw_bronze.partsupp
                WHERE snapshot_id = '{next_snapshot_id}'
            )
            WHERE rn = 1
        """
        )

        return (df, next_snapshot_id)


# Create the streaming table for snapshot CDC
dlt.create_streaming_table(
    name="acme_edw_dev.edw_silver.partsupp_dim",
    comment="Streaming table: partsupp_dim",
    table_properties={"delta.enableRowTracking": "true"},
)

# Snapshot CDC mode using create_auto_cdc_from_snapshot_flow
dlt.create_auto_cdc_from_snapshot_flow(
    target="acme_edw_dev.edw_silver.partsupp_dim",
    source=next_snapshot_and_version,
    keys=["part_id", "supplier_id"],
    stored_as_scd_type=2,
    track_history_except_column_list=[
        "_source_file_path",
        "_processing_timestamp",
        "snapshot_id",
        "partsupp_key",
        "last_modified_dt",
    ],
)
