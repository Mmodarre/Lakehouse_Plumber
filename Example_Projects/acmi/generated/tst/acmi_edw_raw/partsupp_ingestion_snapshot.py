# Generated by LakehousePlumber
# Pipeline: acmi_edw_raw
# FlowGroup: partsupp_ingestion_snapshot

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_raw"
FLOWGROUP_ID = "partsupp_ingestion_snapshot"


# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_partsupp_raw_cloudfiles():
    """Load partsupp_raw Parquet files from landing volume"""
    df = (
        spark.readStream.format("cloudFiles")
        .option("cloudFiles.format", "parquet")
        .option("cloudFiles.maxFilesPerTrigger", 50)
        .option("cloudFiles.inferColumnTypes", True)
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns")
        .option("cloudFiles.rescuedDataColumn", "_rescued_data")
        .load("/Volumes/acme_edw_tst/edw_raw/incoming_volume/partsupp/*.parquet")
    )

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())
    df = df.withColumn("_source_file_path", F.col("_metadata.file_path"))

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_tst.edw_raw.partsupp_raw", comment="Streaming table: partsupp_raw"
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_tst.edw_raw.partsupp_raw",
    name="f_partsupp_raw_cloudfiles",
    comment="Append flow to acme_edw_tst.edw_raw.partsupp_raw",
)
def f_partsupp_raw_cloudfiles():
    """Append flow to acme_edw_tst.edw_raw.partsupp_raw"""
    # Streaming flow
    df = spark.readStream.table("v_partsupp_raw_cloudfiles")

    return df
