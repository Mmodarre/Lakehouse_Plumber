# Generated by LakehousePlumber
# Pipeline: acmi_edw_raw
# FlowGroup: lineitem_ingestion_europe

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_raw"
FLOWGROUP_ID = "lineitem_ingestion_europe"


# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_lineitem_europe_raw_cloudfiles():
    """Load lineitem_europe_raw Parquet files from landing volume"""
    df = (
        spark.readStream.format("cloudFiles")
        .option("cloudFiles.format", "parquet")
        .option("cloudFiles.maxFilesPerTrigger", 50)
        .option("cloudFiles.inferColumnTypes", True)
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns")
        .option("cloudFiles.rescuedDataColumn", "_rescued_data")
        .load(
            "/Volumes/acme_edw_tst/edw_raw/incoming_volume/lineitem/region_EUROPE/*.parquet"
        )
    )

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())
    df = df.withColumn("_source_file_path", F.col("_metadata.file_path"))

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_tst.edw_raw.lineitem_europe_raw",
    comment="Streaming table: lineitem_europe_raw",
    table_properties={"delta.enableRowTracking": "true"},
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_tst.edw_raw.lineitem_europe_raw",
    name="f_lineitem_europe_raw_cloudfiles",
    comment="Append flow to acme_edw_tst.edw_raw.lineitem_europe_raw",
)
def f_lineitem_europe_raw_cloudfiles():
    """Append flow to acme_edw_tst.edw_raw.lineitem_europe_raw"""
    # Streaming flow
    df = spark.readStream.table("v_lineitem_europe_raw_cloudfiles")

    return df
