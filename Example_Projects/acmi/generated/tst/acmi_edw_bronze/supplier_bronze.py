# Generated by LakehousePlumber
# Pipeline: acmi_edw_bronze
# FlowGroup: supplier_bronze

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "acmi_edw_bronze"
FLOWGROUP_ID = "supplier_bronze"


# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_supplier_raw():
    """Load supplier table from raw schema"""
    df = spark.readStream.table("acme_edw_tst.edw_raw.supplier_raw")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


@dlt.view()
def v_supplier_migration():
    """Load supplier table from migration schema"""
    df = spark.read.table("acme_edw_tst.edw_old.supplier")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view(comment="SQL transform: supplier_bronze_incremental_cleanse")
def v_supplier_bronze_cleaned():
    """SQL transform: supplier_bronze_incremental_cleanse"""
    df = spark.sql(
        """SELECT
  xxhash64(s_suppkey,s_name,s_address,s_nationkey,s_phone,s_acctbal,s_comment,split(split(_source_file_path, '/supplier/')[1], '/')[0]) as supplier_key,
  s_suppkey as supplier_id,
  s_name as name,
  s_address as address,
  s_nationkey as nation_id,
  s_phone as phone,
  cast(s_acctbal as decimal(18,2)) as account_balance,
  s_comment as comment,
  replace(split(split(_source_file_path, '/supplier/')[1], '/')[0], '-W', '') as snapshot_id,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  * EXCEPT(s_suppkey, s_name, s_address, s_nationkey, s_phone, s_acctbal, s_comment, last_modified_dt,_rescued_data)
FROM stream(v_supplier_raw)"""
    )

    return df


@dlt.view(comment="SQL transform: supplier_migration_bronze_incremental_cleanse")
def v_supplier_migration_bronze_cleaned():
    """SQL transform: supplier_migration_bronze_incremental_cleanse"""
    df = spark.sql(
        """SELECT
  xxhash64(s_suppkey,s_name,s_address,s_nationkey,s_phone,s_acctbal,s_comment,'2019-W01') as supplier_key,
  s_suppkey as supplier_id,
  s_name as name,
  s_address as address,
  s_nationkey as nation_id,
  s_phone as phone,
  s_acctbal as account_balance,
  s_comment as comment,
  '201901' as snapshot_id,
  cast(last_modified_dt as TIMESTAMP) as last_modified_dt,
  'MIGRATION' as _source_file_path,
  * EXCEPT(s_suppkey, s_name, s_address, s_nationkey, s_phone, s_acctbal, s_comment, last_modified_dt)
FROM v_supplier_migration"""
    )

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_tst.edw_bronze.supplier",
    comment="Streaming table: supplier",
    table_properties={"delta.enableRowTracking": "true"},
    partition_cols=["snapshot_id"],
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_tst.edw_bronze.supplier",
    name="f_supplier_bronze_incremental",
    comment="Append flow to acme_edw_tst.edw_bronze.supplier",
)
def f_supplier_bronze_incremental():
    """Append flow to acme_edw_tst.edw_bronze.supplier"""
    # Streaming flow
    df = spark.readStream.table("v_supplier_bronze_cleaned")

    return df


@dlt.append_flow(
    target="acme_edw_tst.edw_bronze.supplier",
    name="f_supplier_migration_bronze_incremental",
    once=True,
    comment="Append flow to acme_edw_tst.edw_bronze.supplier",
)
def f_supplier_migration_bronze_incremental():
    """Append flow to acme_edw_tst.edw_bronze.supplier"""
    # One-time flow (backfill)
    df = spark.read.table("v_supplier_migration_bronze_cleaned")

    return df
