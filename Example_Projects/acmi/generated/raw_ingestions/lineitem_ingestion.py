# Generated by LakehousePlumber
# Pipeline: raw_ingestions
# FlowGroup: lineitem_ingestion

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "raw_ingestions"
FLOWGROUP_ID = "lineitem_ingestion"

# ============================================================================
# SOURCE VIEWS
# ============================================================================

# Schema hints for lineitem_cloudfiles table
lineitem_cloudfiles_schema_hints = """
    l_orderkey BIGINT,
    l_partkey BIGINT,
    l_suppkey BIGINT,
    l_linenumber INT,
    l_quantity DECIMAL(18,2),
    l_extendedprice DECIMAL(18,2),
    l_discount DECIMAL(18,2),
    l_tax DECIMAL(18,2),
    l_returnflag STRING,
    l_linestatus STRING,
    l_shipdate DATE,
    l_commitdate DATE,
    l_receiptdate DATE,
    l_shipinstruct STRING,
    l_shipmode STRING,
    l_comment STRING
""".strip().replace("\n", " ")


@dlt.view()
def v_lineitem_cloudfiles():
    """Load lineitem JSON files from landing volume"""
    df = spark.readStream \
        .format("cloudFiles") \
        .option("cloudFiles.format", "json") \
        .option("cloudFiles.maxFilesPerTrigger", 50) \
        .option("cloudFiles.inferColumnTypes", True) \
        .option("cloudFiles.schemaEvolutionMode", "addNewColumns") \
        .option("cloudFiles.rescuedDataColumn", "_rescued_data") \
        .option("cloudFiles.schemaHints", lineitem_cloudfiles_schema_hints) \
        .load("/Volumes/acmi_edw_dev/edw_raw/landing_volume/lineitem/*.json")


    # Add operational metadata columns
    df = df.withColumn('_source_file_path', F.col('_metadata.file_path'))

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_raw.lineitem",
    comment="Streaming table: lineitem")


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_raw.lineitem",
    name="f_lineitem_cloudfiles",
    comment="Append flow to acmi_edw_dev.edw_raw.lineitem"
)
def f_lineitem_cloudfiles():
    """Append flow to acmi_edw_dev.edw_raw.lineitem"""
    # Streaming flow
    df = spark.readStream.table("v_lineitem_cloudfiles")

    return df
