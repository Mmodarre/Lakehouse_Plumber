# Generated by LakehousePlumber
# Pipeline: bronze_load
# FlowGroup: supplier_bronze

from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "bronze_load"
FLOWGROUP_ID = "supplier_bronze"

# ============================================================================
# SOURCE VIEWS
# ============================================================================

@dlt.view()
def v_supplier_raw():
    """Load supplier table from raw schema"""
    df = spark.readStream \
        .table("acmi_edw_dev.edw_raw.supplier")

    # Add operational metadata columns
    df = df.withColumn('_processing_timestamp', F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================

@dlt.view(comment="SQL transform: supplier_bronze_cleanse")
def v_supplier_bronze_cleaned():
    """SQL transform: supplier_bronze_cleanse"""
    df = spark.sql("""SELECT
  s_suppkey as supplier_id,
  s_name as name,
  s_address as address,
  s_nationkey as nation_id,
  s_phone as phone,
  s_acctbal as account_balance,
  s_comment as comment,
  _source_file_path,
  _source_file_size,
  _source_file_modification_time,
  _record_hash,
  _processing_timestamp
FROM stream(v_supplier_raw)""")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acmi_edw_dev.edw_bronze.supplier",
    comment="Streaming table: supplier")


# Define append flow(s)
@dlt.append_flow(
    target="acmi_edw_dev.edw_bronze.supplier",
    name="f_supplier_bronze",
    comment="Append flow to acmi_edw_dev.edw_bronze.supplier"
)
def f_supplier_bronze():
    """Append flow to acmi_edw_dev.edw_bronze.supplier"""
    # Streaming flow
    df = spark.readStream.table("v_supplier_bronze_cleaned")

    return df
