# Generated by LakehousePlumber
# Pipeline: test_python_func_pipeline
# FlowGroup: python_func_flowgroup

from custom_python_functions.sample_func import transform_lrc_data_streaming
from pyspark.sql import functions as F
import dlt

# Pipeline Configuration
PIPELINE_ID = "test_python_func_pipeline"
FLOWGROUP_ID = "python_func_flowgroup"


# ============================================================================
# SOURCE VIEWS
# ============================================================================


@dlt.view()
def v_customer_raw():
    """Load customer table from raw schema"""
    df = spark.readStream.table("acme_edw_dev.edw_raw.customer")

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


# ============================================================================
# TRANSFORMATION VIEWS
# ============================================================================


@dlt.view()
def v_customer_bronze_cleaned():
    """Python transform: test_func.transform_lrc_data_streaming"""
    # Load source view(s)
    v_customer_raw_df = spark.readStream.table("v_customer_raw")

    # Apply Python transformation
    parameters = {"spark": "spark", "parameters": {}}
    df = transform_lrc_data_streaming(v_customer_raw_df, spark, parameters)

    # Add operational metadata columns
    df = df.withColumn("_processing_timestamp", F.current_timestamp())

    return df


@dlt.view()
# These expectations will fail the pipeline if violated
@dlt.expect_all_or_fail(
    {
        "valid_custkey": "customer_id IS NOT NULL AND customer_id > 0",
        "valid_customer_name": "name IS NOT NULL AND LENGTH(TRIM(name)) > 0",
        "valid_nation_key": "nation_id IS NOT NULL AND nation_id >= 0",
    }
)
# These expectations will log warnings but not drop rows
@dlt.expect_all(
    {
        "valid_phone_format": "phone IS NULL OR LENGTH(phone) >= 10",
        "valid_account_balance": "account_balance IS NULL OR account_balance >= -10000",
        "valid_market_segment": "market_segment IS NULL OR market_segment IN ('BUILDING', 'FURNITURE', 'HOUSEHOLD', 'MACHINERY')",
    }
)
def v_customer_bronze_DQE():
    """Apply data quality checks to customer"""
    df = spark.readStream.table("v_customer_bronze_cleaned")

    return df


# ============================================================================
# TARGET TABLES
# ============================================================================

# Create the streaming table
dlt.create_streaming_table(
    name="acme_edw_dev.edw_bronze.customer",
    comment="Streaming table: customer",
    table_properties={
        "delta.enableRowTracking": "true",
        "tag_name1": "tag_value1",
        "tag_name2": "tag_value2",
    },
)


# Define append flow(s)
@dlt.append_flow(
    target="acme_edw_dev.edw_bronze.customer",
    name="f_customer_bronze",
    comment="Append flow to acme_edw_dev.edw_bronze.customer",
)
def f_customer_bronze():
    """Append flow to acme_edw_dev.edw_bronze.customer"""
    # Streaming flow
    df = spark.readStream.table("v_customer_bronze_DQE")

    return df
