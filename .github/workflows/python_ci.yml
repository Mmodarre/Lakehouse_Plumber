# This workflow will install Python dependencies, run tests and lint with multiple versions of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        # Install the package in development mode
        pip install -e .
        # Install additional requirements if they exist
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
      shell: bash
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics \
          --exclude=.git,__pycache__,docs/source/conf.py,old,build,dist,*.egg-info
      shell: bash
          
    - name: Test with pytest
      run: |
        # Run tests with coverage if tests directory exists
        if [ -d "tests" ]; then
          pytest --cov --cov-branch --cov-report=xml --cov-fail-under=40
        else
          echo "No tests directory found, skipping tests"
        fi
      shell: bash

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        slug: Mmodarre/Lakehouse_Plumber

  # Separate job for testing import functionality across platforms
  test-import:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .
      shell: bash
    
    - name: Test basic import and CLI
      run: |
        # Test that the package can be imported without syntax errors
        python -c "import lhp; print('[OK] Package imports successfully')"
        # Test that the CLI command works
        lhp --version || echo "CLI version check failed"
        lhp --help > /dev/null && echo "[OK] CLI help works" || echo "CLI help failed"
      shell: bash